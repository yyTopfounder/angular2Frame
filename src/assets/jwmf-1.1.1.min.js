var wmf = {};
wmf.ready = function (n) { function t(n, t) { wmf = n; wmf.init(function (n) { var i = n.split("&spt;"), r = JSON.parse(i[0]); for (var u in r)
    r.hasOwnProperty(u) && (wmf[u] = r[u]); i.length > 1 && (wmf.ExpandParam = i[1]); wmf.getDataByWklAdapter = function (n, t, i, r) { wmf.callHandler("getJsonDataByWklAdapter", { adapterName: n, methodName: t, params: i }, function (n) { r && r(n); }); }; wmf.getResponseDataByWklAdapter = function (n, t, i, r) { wmf.callHandler("getResponseDataByWklAdapter", { adapterName: n, methodName: t, params: i }, function (n) { r && r(n); }); }; wmf.fileReader = function (n, t, i, r) { i || (i = "true"); r || (r = "2"); wmf.callHandler("viewAttachments", { canOpenInOtherApp: n + "", fileUrls: t + "", showDetailProgress: i + "", loadingType: r + "" }); }; wmf.goBackDelegateFunc = null; wmf.isWillCloseApp = !1; wmf.goBack = function () { if (wmf.goBackDelegateFunc) {
    wmf.goBackDelegateFunc();
    return;
} history.back(); }; wmf.multiImagePicker = function (n) { wmf.callHandler("multiImagePicker", {}, function (t) { if (n) {
    var i = [];
    i = typeof t == "string" ? t.split("&spt;") : t;
    n(i);
} }); }; wmf.imagePicker = function (n) { wmf.callHandler("imagePicker", {}, function (t) { n && n(t); }); }; wmf.imageTaker = function (n) { wmf.callHandler("imageTaker", {}, function (t) { n && n(t); }); }; wmf.offlineDataSave = function (n, t, i, r, u, f) { wmf.callHandler("offlineDataSave", { dataId: n, appCode: t, dataCategory: i, dataCode: r, dataValue: u }, function (n) { f && f(n); }); }; wmf.offlineGetData = function (n, t, i, r) { wmf.callHandler("offlineGetData", { appCode: n, dataCategory: t, dataCode: i }, function (n) { var t, f, i, u, e; if (r) {
    if (t = n.split("&dot;"), f = [], t.length > 0)
        for (i = 0; i < t.length; i++)
            (u = t[i].split("&spt;"), u.length == 2) && (e = [u[0], u[1]], f.push(e));
    r(f);
} }); }; wmf.offlineGetDataByDataId = function (n, t) { wmf.callHandler("offlineGetData", { dataId: n }, function (n) { var i, f, r, u, e; if (t) {
    if (i = n.split("&dot;"), f = [], i.length > 0)
        for (r = 0; r < i.length; r++)
            (u = i[r].split("&spt;"), u.length == 2) && (e = [u[0], u[1]], f.push(e));
    t(f);
} }); }; wmf.offlineDataDelete = function (n, t) { parseInt(n) && wmf.callHandler("offlineDataDelete", { dataId: parseInt(n) }, function (n) { t && t(n); }); }; wmf.getSameNameInAddressBook = function (n, t) { wmf.callHandler("findNameInAddressBook", n, function (n) { t && t(n); }); }; wmf.savevCardInfo = function (n, t) { wmf.callHandler("saveAddressBook", n, function (n) { t && t(n); }); }; wmf.copytoPasteboard = function (n, t) { wmf.callHandler("copyTexttoPasteboard", n, function (n) { t && t(n); }); }; wmf.setHeadBarTitle = function (n) { wmf.callHandler("setHeadBarTitle", { title: n }, function () { }); }; wmf.WVClose = function (n) { wmf.callHandler("WVClose", {}, function (t) { n && n(t); }); }; wmf.callNativeDelegateFunc = function (n, t) { n || (n = ""); wmf.callHandler("callNativeDelegateFunc", n, function (n) { t && t(n); }); }; wmf.WMFGPSLocation = function (n) { wmf.callHandler("WMFGPSLocation", {}, function (t) { n && n(t); }); }; t(); }); } window.WebViewJavascriptBridge ? t(window.WebViewJavascriptBridge, n) : document.addEventListener("WebViewJavascriptBridgeReady", function () { t(window.WebViewJavascriptBridge, n); }, !1); };
export {wmf}
